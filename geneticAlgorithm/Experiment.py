"""
Alex Staley -- 919519311
CS441, Program 2 -- February 2021

This file implements the high-level functionality used to run the experiment.
Defined below are functions to:
    * Set up an initial population of valid, randomly generated states
    * Define generation numbers from which to sample boards to display with the results
    * Calculate the average fitness of a generation
    * Display the average fitness as a function of the generation number
    * Display a selection of board states taken from throughout the experiment

Also defined below are constant terms representing:
    * The maximum number of iterations of the Genetic Algorithm
    * The number of example board states to display with the results
    (in addition to an initial state and another state three generations in)
"""
from geneticAlgorithm.Genalg import *
import matplotlib.pyplot as plt

NUM_ITERS = 10000  # Max number of iterations of the genetic algorithm
SAMPLE_RATE = 4    # Number of extra Board objects to display in results


def setupPopulation():
    """
    Set up an initial population of POP_SIZE individuals with randomly generated board configurations
    :return: list of Board objects
    """
    population = []
    for i in range(POP_SIZE):
        board = Board().randomQueens()
        population.append(board)
    return population


def defineSamples():
    """
    Define generations from which to display the fittest Boards in the results.
    Always include the first (randomly generated) fittest Board (i.e. index 0)
    and the fittest Board generated by three iterations of the GA (i.e. index 3).
    Space the rest out evenly throughout the maximum NUM_ITERS generations.
    :return: list of integer indices of generations
    """
    sampleIndices = [0, 3]
    for i in range(1, SAMPLE_RATE):
        sampleIndices.append(i * NUM_ITERS//SAMPLE_RATE - SAMPLE_RATE)
    return sampleIndices


def getAvgFitness(population):
    """
    Compute the average fitness value of a given population
    :param population: list of Board objects
    :return: floating point value representing the mean fitness of the population
    """
    fitnesses = []
    for soul in population:
        fitnesses.append(soul.getFitness())
    return sum(fitnesses) / len(fitnesses)


def displayGraph(fitnessAvgs, generations):
    """
    Generate a line plot of average fitness over generations
    :param fitnessAvgs: list of floating point average fitness values for successive populations
    :param generations: number of generations the algorithm ran
    """
    specs = str(NUM_ITERS) + " generation limit" \
            "\nPopulation size = " + str(POP_SIZE) + \
            "\nMutation rate = 1/" + str(MUTANT_RATE)
    plt.plot(fitnessAvgs)
    plt.ylabel("Average fitness")
    plt.xlabel("Generation")
    plt.figtext(0.88, 0.85, specs, horizontalalignment="right", verticalalignment="top", wrap=True, fontsize=10)
    plt.title("Average fitness over " + str(generations) + " Generations")
    plt.show()


def displayBoards(exampleBoards, exampleIndices, generations):
    """
    Display a selection of the board states generated throughout the experiment
    :param exampleBoards: list of Board objects to display as examples
    :param exampleIndices: generation number of example Boards
    :param generations: number of generations the algorithm ran
    :return:
    """
    print("\n\n***** SOME SAMPLE BOARDS: *****")
    for index, board in enumerate(exampleBoards):
        print('')
        if index == 0:
            print("Fittest of", POP_SIZE, "randomly generated starting states:")
        elif index == 1:
            print("After three iterations of the genetic algorithm:")
        elif index == len(exampleBoards) - 1:
            if generations == NUM_ITERS:  # No solution found
                print("After ", generations, " iterations of the GA (",
                      NUM_ITERS, "-generation limit reached, no solution found):", sep='')
            else:  # Solution found
                print("After", generations, "iterations of the GA, solution found:")
            board.print()
            print("Fitness =", board.getFitness())
            break
        else:
            print("After", exampleIndices[index], "iterations of the GA:")
        board.print()
        print("Fitness =", board.getFitness())
